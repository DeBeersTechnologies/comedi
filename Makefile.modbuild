
-include .sourcedirs

# Makefile for modbuild

# define the following if you want to compile using PCMCIA
# headers
# PCMCIADIR = /home/ds/stuff/pcmcia-cs-3.1.15

ARCH := $(shell uname -m | sed -e s/i.86/i386/ -e s/sun4u/sparc64/ -e s/arm.*/arm/ -e s/sa110/arm/)

.EXPORT_ALL_VARIABLES:
CONFIG_SHELL := $(shell if [ -x "$$BASH" ]; then echo $$BASH; \
	else if [ -x /bin/bash ]; then echo /bin/bash; \
	else echo sh; fi ; fi)
TOPDIR := $(shell if [ "$$PWD" != "" ]; then echo $$PWD; else pwd; fi)

HPATH		= $(TOPDIR)/include
FINDHPATH	= $(HPATH)

HOSTCC		=gcc
HOSTCFLAGS	=-Wall -Wstrict-prototypes -O2 -fomit-frame-pointer

CROSS_COMPILE	= 

#
# Include the make variables (CC, etc...)
#

AS              = $(CROSS_COMPILE)as
LD              = $(CROSS_COMPILE)ld
CC              = $(CROSS_COMPILE)gcc
CPP             = $(CC) -E
AR              = $(CROSS_COMPILE)ar
NM              = $(CROSS_COMPILE)nm
STRIP           = $(CROSS_COMPILE)strip
OBJCOPY         = $(CROSS_COMPILE)objcopy
OBJDUMP         = $(CROSS_COMPILE)objdump
MAKEFILES       = $(TOPDIR)/.config
GENKSYMS        = /sbin/genksyms
MODFLAGS        = -DMODULE
PERL            = perl

export  VERSION PATCHLEVEL SUBLEVEL EXTRAVERSION KERNELRELEASE ARCH \
	CONFIG_SHELL TOPDIR HPATH HOSTCC HOSTCFLAGS CROSS_COMPILE AS LD CC \
	CPP AR NM STRIP OBJCOPY OBJDUMP MAKE MAKEFILES GENKSYMS MODFLAGS PERL

CFLAGS = -Wall -Wstrict-prototypes -O2 -fomit-frame-pointer 
# use '-fno-strict-aliasing', but only if the compiler can take it
CFLAGS += $(shell if $(CC) -fno-strict-aliasing -S -o /dev/null -xc /dev/null >/dev/null 2>&1; then echo "-fno-strict-aliasing"; fi)
#CFLAGS += -include $(TOPDIR)/include/modbuild/config.h
CFLAGS += -D__KERNEL__ -I $(TOPDIR)/include -I $(LINUXDIR)/include -I .
CFLAGS += -D__MODBUILD__
ifdef RTLDIR
CFLAGS += -I $(RTLDIR)/include -I $(RTLDIR)/include/posix -I $(RTLDIR)/include/compat -D__RT__
endif
ifdef RTAIDIR
CFLAGS += -I $(TOPDIR)/include/rtai
endif

CONFIG_SHELL := sh

PROJECTRELEASE=$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)

-include $(LINUXDIR)/.config
ifdef PCMCIADIR
CONFIG_PCMCIA=m
CFLAGS += -I $(PCMCIADIR)/include
endif

ifeq (.config,$(wildcard .config))
include .config
include .uts_version
ifeq (.depend,$(wildcard .depend))
include .depend
all2:	modules
else
all2:	depend modules
endif
else
all2:	config
endif

ifeq ($(CONFIG_SMP),y)
CFLAGS += -D__SMP__
endif

-include arch/$(ARCH)/Makefile
-include arch/Makefile.noarch

oldconfig:	dummy
	$(CONFIG_SHELL) scripts/Configure -d

config:	dummy
	$(CONFIG_SHELL) scripts/Configure

MODULES		= $(wildcard modules/*.o)
MODULES_PCMCIA	= $(filter %_cs.o, $(MODULES))
MODULES_MISC	= $(filter-out %_cs.o, $(MODULES))

install:	dummy
	mkdir -p ${INSTALL_MOD_PATH}/lib/modules/${UTS_VERSION}/misc
	install -d ${INSTALL_MOD_PATH}/lib/modules/${UTS_VERSION}/misc
	install ${MODULES_MISC} ${INSTALL_MOD_PATH}/lib/modules/${UTS_VERSION}/misc
ifneq ($(MODULES_PCMCIA),)
	mkdir -p ${INSTALL_MOD_PATH}/lib/modules/${UTS_VERSION}/pcmcia
	install ${MODULES_PCMCIA} ${INSTALL_MOD_PATH}/lib/modules/${UTS_VERSION}/pcmcia
endif
ifeq (${INSTALL_MOD_PATH},)
	/sbin/depmod -a ${UTS_VERSION}
else
	echo 'depmod -a not run'
endif


ifeq ($(CONFIG_MODVERSIONS),y)
MODFLAGS += -DMODVERSIONS -include $(LINUXDIR)/include/linux/modversions.h
endif


modules:	$(patsubst %, _mod_%, $(SUBDIRS))

$(patsubst %, _mod_%, $(SUBDIRS)) : dummy
	-mkdir modules
	$(MAKE) -C $(patsubst _mod_%, %, $@) CFLAGS="$(CFLAGS) $(MODFLAGS)" MAKING_MODULES=1 modules

dep-files: scripts/mkdep archdep include/modbuild/version.h new-genksyms
#	scripts/mkdep init/*.c >.depend
	echo >.depend
	scripts/mkdep `find $(FINDHPATH) -follow -name \*.h ! -name modversions.h -print` > .hdepend
#	set -e; for i in $(SUBDIRS); do $(MAKE) -C $$i fastdep ;done
# let this be made through the fastdep rule in Rules.make
	$(MAKE) $(patsubst %,_sfdep_%,$(SUBDIRS)) _FASTDEP_ALL_SUB_DIRS="$(SUBDIRS)"

include/modbuild/version.h: ./Makefile
	@echo \#define $(PROJECT)_RELEASE \"$(PROJECTRELEASE)\" > .ver
	@echo \#define $(PROJECT)_VERSION_CODE `expr $(VERSION) \\* 65536 + $(PATCHLEVEL) \\* 256 + $(SUBLEVEL)` >> .ver
	@echo '#define $(PROJECT)_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))' >>.ver
	@mv -f .ver $@


MODVERFILE :=

new-genksyms:

depend dep: dep-files $(MODVERFILE)

clean:
	rm -f core `find . -name '*.[oas]'`
	rm -f core `find . -name '.*.flags' -print`

distclean:	clean
	rm -f .depend `find . -name .depend -print`
	rm -f core `find . \( -name '*.orig' -o -name '*.rej' -o -name '*~' \
		-o -name '*.bak' -o -name '#*#' -o -name '.*.orig' \
		-o -name '.*.rej' -o -name '.SUMS' -o -size 0 \) -print` TAGS
	-rm -rf modules
	rm -f .config .uts_version .config.old
	rm -f scripts/mkdep
	rm -f .sourcedirs
	rm -f include/modbuild/*.h
	rm -f include/rtai include/rtlinux

include $(TOPDIR)/Rules.make


dummy:

#
# This generates dependencies for the .h files.
#

scripts/mkdep: scripts/mkdep.c
	$(HOSTCC) $(HOSTCFLAGS) -o scripts/mkdep scripts/mkdep.c

scripts/split-include: scripts/split-include.c
	$(HOSTCC) $(HOSTCFLAGS) -o scripts/split-include scripts/split-include.c

